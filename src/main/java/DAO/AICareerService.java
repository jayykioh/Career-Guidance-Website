package DAO;


import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.List;
import java.util.ArrayList;
import Model.AICareerResponse;

public class AICareerService {
    private static final String OPENAI_API_URL = "https://api.openai.com/v1/chat/completions";

    // ‚úÖ Load API key from environment variable instead of hardcoding
    private static final String API_KEY = System.getenv("OPENAI_API_KEY");

    private static final ObjectMapper mapper = new ObjectMapper();
    private static final HttpClient client = HttpClient.newBuilder()
            .connectTimeout(Duration.ofSeconds(30))
            .build();

    /**
     * Generate the prompt for OpenAI API
     */
    private String generateCareerPrompt(String majors) {
        return String.format(
            "T√¥i c√≥ danh s√°ch ng√†nh h·ªçc sau: %s\n\n" +
            "H√£y ph√¢n t√≠ch v√† tr·∫£ v·ªÅ m·ªôt danh s√°ch JSON v·ªõi th√¥ng tin ngh·ªÅ nghi·ªáp chi ti·∫øt. " +
            "M·ªói ph·∫ßn t·ª≠ trong array ph·∫£i c√≥ ƒë√∫ng 3 tr∆∞·ªùng sau:\n\n" +
            "{\n" +
            "  \"carrie\": \"T√™n ngh·ªÅ nghi·ªáp c·ª• th·ªÉ (v√≠ d·ª•: K·ªπ s∆∞ ph·∫ßn m·ªÅm, Nh√† thi·∫øt k·∫ø UX/UI)\",\n" +
            "  \"paidment\": \"M·ª©c l∆∞∆°ng chi ti·∫øt (VD: 15-30 tri·ªáu VNƒê/th√°ng t·∫°i VN, $50k-80k/nƒÉm t·∫°i M·ªπ)\",\n" +
            "  \"futureNote\": \"Tri·ªÉn v·ªçng v√† xu h∆∞·ªõng ph√°t tri·ªÉn (50-100 t·ª´)\"\n" +
            "}\n\n" +
            "Y√™u c·∫ßu:\n" +
            "- Tr·∫£ v·ªÅ 3-5 ngh·ªÅ nghi·ªáp ph√π h·ª£p nh·∫•t\n" +
            "- Th√¥ng tin l∆∞∆°ng ph·∫£i th·ª±c t·∫ø v√† c·∫≠p nh·∫≠t\n" +
            "- Tri·ªÉn v·ªçng t∆∞∆°ng lai ph·∫£i d·ª±a tr√™n xu h∆∞·ªõng th·ªã tr∆∞·ªùng\n" +
            "- Ch·ªâ tr·∫£ v·ªÅ JSON array, kh√¥ng c√≥ text gi·∫£i th√≠ch th√™m\n" +
            "- ƒê·∫£m b·∫£o JSON format ƒë√∫ng chu·∫©n",
            majors
        );
    }

    /**
     * Call OpenAI API
     */
    public List<AICareerResponse> suggestCareers(String majorInput) throws IOException, InterruptedException {
        if (majorInput == null || majorInput.trim().isEmpty()) {
            throw new IllegalArgumentException("Major input kh√¥ng ƒë∆∞·ª£c tr·ªëng");
        }

        // üîí Safety: check key before sending request
        if (API_KEY == null || API_KEY.isBlank()) {
            throw new IllegalStateException("‚ùå Missing OPENAI_API_KEY environment variable");
        }

        try {
            String prompt = generateCareerPrompt(majorInput.trim());
            String payload = createRequestPayload(prompt);

            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(OPENAI_API_URL))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + API_KEY)
                .timeout(Duration.ofSeconds(60))
                .POST(HttpRequest.BodyPublishers.ofString(payload))
                .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            return handleResponse(response);

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi g·ªçi OpenAI API: " + e.getMessage());
            return getFallbackSuggestions(majorInput);
        }
    }
    
    /**
     * T·∫°o JSON payload cho OpenAI request
     */
    private String createRequestPayload(String prompt) throws IOException {
        return String.format(
            "{\n" +
            "  \"model\": \"gpt-4o\",\n" +
            "  \"messages\": [\n" +
            "    {\n" +
            "      \"role\": \"system\",\n" +
            "      \"content\": \"B·∫°n l√† chuy√™n gia h∆∞·ªõng nghi·ªáp v√† ph√¢n t√≠ch th·ªã tr∆∞·ªùng lao ƒë·ªông t·∫°i Vi·ªát Nam v√† qu·ªëc t·∫ø. B·∫°n c√≥ ki·∫øn th·ª©c s√¢u v·ªÅ m·ª©c l∆∞∆°ng, tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp v√† xu h∆∞·ªõng tuy·ªÉn d·ª•ng.\"\n" +
            "    },\n" +
            "    {\n" +
            "      \"role\": \"user\",\n" +
            "      \"content\": %s\n" +
            "    }\n" +
            "  ],\n" +
            "  \"temperature\": 0.3,\n" +
            "  \"max_tokens\": 2500,\n" +
            "  \"top_p\": 1.0,\n" +
            "  \"frequency_penalty\": 0.0,\n" +
            "  \"presence_penalty\": 0.0\n" +
            "}", mapper.writeValueAsString(prompt)
        );
    }
    
    /**
     * X·ª≠ l√Ω response t·ª´ OpenAI API
     */
    private List<AICareerResponse> handleResponse(HttpResponse<String> response) throws IOException {
        if (response.statusCode() != 200) {
            String errorMsg = String.format("OpenAI API failed with status: %d, body: %s", 
                response.statusCode(), response.body());
            throw new RuntimeException(errorMsg);
        }
        
        try {
            String content = mapper
                .readTree(response.body())
                .get("choices")
                .get(0)
                .get("message")
                .get("content")
                .asText();
            
            return parseAIResponse(content);
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói parse response: " + e.getMessage());
            System.err.println("Response body: " + response.body());
            throw new RuntimeException("Kh√¥ng th·ªÉ parse response t·ª´ OpenAI", e);
        }
    }
    
    /**
     * Parse v√† clean JSON response t·ª´ AI
     */
    private List<AICareerResponse> parseAIResponse(String content) throws IOException {
        try {
            // Clean JSON - lo·∫°i b·ªè markdown formatting
            String cleanJson = content
                .replaceAll("(?s)^```json\\s*", "")
                .replaceAll("(?s)```\\s*$", "")
                .replaceAll("(?s)^```\\s*", "")
                .trim();
            
            // Log ƒë·ªÉ debug
            System.out.println("üîç Cleaned JSON: " + cleanJson);
            
            List<AICareerResponse> results = mapper.readValue(
                cleanJson, 
                new TypeReference<List<AICareerResponse>>() {}
            );
            
            // Validate results
            return validateAndFilterResults(results);
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói parse JSON content: " + content);
            throw new IOException("Kh√¥ng th·ªÉ parse JSON t·ª´ AI response", e);
        }
    }
    
    /**
     * Validate v√† filter k·∫øt qu·∫£ t·ª´ AI
     */
    private List<AICareerResponse> validateAndFilterResults(List<AICareerResponse> results) {
        List<AICareerResponse> validResults = new ArrayList<>();
        
        for (AICareerResponse result : results) {
            if (isValidResponse(result)) {
                validResults.add(result);
            }
        }
        
        return validResults;
    }
    
    /**
     * Ki·ªÉm tra response c√≥ h·ª£p l·ªá kh√¥ng
     */
    private boolean isValidResponse(AICareerResponse response) {
        return response != null && 
               response.getCarrie() != null && !response.getCarrie().trim().isEmpty() &&
               response.getPaidment() != null && !response.getPaidment().trim().isEmpty() &&
               response.getFutureNote() != null && !response.getFutureNote().trim().isEmpty();
    }
    
    /**
     * Fallback data khi API fail
     */
    private List<AICareerResponse> getFallbackSuggestions(String majorInput) {
        List<AICareerResponse> fallback = new ArrayList<>();
        
        fallback.add(new AICareerResponse(
            "K·ªπ s∆∞ ph·∫ßn m·ªÅm",
            "15-35 tri·ªáu VNƒê/th√°ng t·∫°i VN, $60k-120k/nƒÉm t·∫°i M·ªπ",
            "Nhu c·∫ßu cao trong k·ª∑ nguy√™n s·ªë h√≥a. C∆° h·ªôi ph√°t tri·ªÉn v·ªÅ AI, cloud computing, mobile app."
        ));
        
        fallback.add(new AICareerResponse(
            "Chuy√™n vi√™n ph√¢n t√≠ch d·ªØ li·ªáu",
            "12-28 tri·ªáu VNƒê/th√°ng t·∫°i VN, $55k-95k/nƒÉm t·∫°i M·ªπ",
            "Ng√†nh hot v·ªõi big data v√† AI. Tri·ªÉn v·ªçng t·ªët trong fintech, e-commerce, marketing."
        ));
        
        fallback.add(new AICareerResponse(
            "Product Manager",
            "20-45 tri·ªáu VNƒê/th√°ng t·∫°i VN, $80k-150k/nƒÉm t·∫°i M·ªπ",
            "V·ªã tr√≠ then ch·ªët trong c√°c c√¥ng ty tech. C·∫ßn k·ªπ nƒÉng k·∫øt h·ª£p business v√† technical."
        ));
        
        System.out.println("‚ö†Ô∏è S·ª≠ d·ª•ng d·ªØ li·ªáu fallback do API kh√¥ng kh·∫£ d·ª•ng");
        return fallback;
    }
}